<?xml version="1.0" encoding="UTF-8"?>
<item><pubDate>Fri, 24 Jan 2014 13:08:08 +0100</pubDate><title><![CDATA[Case 8 - AMD]]></title><url><![CDATA[case-8-amd]]></url><meta><![CDATA[]]></meta><metad><![CDATA[]]></metad><menu><![CDATA[Case 8 - AMD]]></menu><menuOrder><![CDATA[0]]></menuOrder><menuStatus><![CDATA[Y]]></menuStatus><template><![CDATA[template.php]]></template><parent><![CDATA[]]></parent><content><![CDATA[&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;data/uploads/case8.zip&quot;&gt;Download de source&lt;/a&gt; voor deze opdracht om te beginnen met de case. Pak de zip file uit zoals je in case 1 hebt geleerd. Als het goed is zie je nu in WebStorm onder de folder &quot;opdrachten&quot; de sources van case 8 staan.&lt;/p&gt;
&lt;h2&gt;Omschrijving&lt;/h2&gt;
&lt;p&gt;In case 3 heb je geleerd hoe je functionaliteiten groepeerd in losse javascript files. In case 6 heb je geleerd hoe je met het module pattern scoping issues kunt voorkomen. Hoewel deze methodes een stuk in de juiste richting zijn voor de opzet van je applicatie zijn er toch nog enkele problemen:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Alle losse JS files moeten in de HTML worden opgenomen;&lt;/li&gt;
	&lt;li&gt;Alle losse JS files worden in de browser ingeladen, ook als de code hierin nog niet wordt gebruikt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zojuist is verteld hoe je deze problemen kunt oplossen met het Asynchronous Module Pattern (AMD). Tevens is je net uitgelegd hoe je met AMD minification voordelen kunt behalen t.o.v. een &quot;handmatig&quot; gestructureerde applicatie. Het doel van deze opdracht het AMD pattern op verschillende manieren toepassen.&lt;/p&gt;
&lt;p&gt;In deze opdracht krijg je de hele source van de Todo app tot je beschikking. Deze opdracht omslaat dus meer code dan de eerdere cases, waarmee de voordelen van AMD beter tot zijn recht komen.&lt;/p&gt;
&lt;h2&gt;Opdracht 1 - Toepassen AMD&lt;/h2&gt;
&lt;p&gt;Open in je browser de URL &quot;http://localhost:8000/opdrachten/case8/template.html&quot; om de achtste case te laden. Je krijgt initieel het gebruikersselectiescherm voor je neus waar je een gebruiker kiest om door de applicatie heen te lopen. Vervolgens krijg je de todo pagina voor je neus waar je todo&#039;s kunt assignen aan andere gebruikers en todos kunt aanmaken/bewerken.&lt;/p&gt;
&lt;p&gt;Bekijk in WebStorm de javascript bestanden die bij deze opdracht horen. Doorloop onderstaande stappen om de opdracht te voltooien.&lt;/p&gt;
&lt;h3&gt;Asynchronous Module Definition&lt;/h3&gt;
&lt;ol&gt;
	&lt;li&gt;Blader door de verschillende javascript sources en de js/app folders. Probeer te begrijpen wat de functionaliteiten van de verschillende files zijn. Wat valt je op over de opzet van de applicatie? Welk pattern wordt er toegepast?&lt;/li&gt;
	&lt;li&gt;Open vervolgens het bestand &quot;template.html&quot;. Wat valt je op/welk nadeel kun je herkennen aan de huidige opzet?&lt;/li&gt;
	&lt;li&gt;Bekijk de GebruikerSelectieView module. Deze view ge&lt;/li&gt;
	&lt;li&gt;Commentarieer in de bestanden &quot;template.html&quot; en &quot;init.js&quot; de regels code uit waar stap 4 bij genoemd staat.&lt;/li&gt;
	&lt;li&gt;Pas overal waar mogelijk AMD toe waar nu het module pattern wordt toegepast.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Modules binnen AMD worden gedeclareerd middels&lt;br /&gt;
		define([&#039;app/path/naar/dependency&#039;], function(BinnenModuleBruikbareVariable) { // Module code }&lt;/li&gt;
	&lt;li&gt;Binnen AMD hoeven modules niet aan een variable geassigned zoals met het module pattern wel het geval is. Het AMD framework (in dit geval RequireJS) handelt dit voor jou af.&lt;/li&gt;
	&lt;li&gt;Met een define statement maak je een module die binnen andere modules gebruikt kunnen worden. Modules die met een define gedefinieerd worden wordt pas uitgevoerd zodra ze nodig zijn.&lt;/li&gt;
	&lt;li&gt;Met require (zelfde syntax als define) kunnen modules gedefinieerd worden die direct worden uitgevoerd. Probeer zelf te bepalen wanneer je define en wanneer je require nodig hebt (hint: het overgrote deel zal bestaan uit modules die met define gemaakt zijn).&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;5&quot;&gt;
	&lt;li&gt;Als je AMD hebt toegepast, en de sources via AMD worden ingeladen, moet je nog een aanpassing maken in het bestand &quot;template.html&quot;.&lt;/li&gt;
	&lt;li&gt;Refresh je browser en controleer of alles nog werkt als voorheen. Bekijk tevens de FireBug console en controleer dat er geen errors meer optreden. Bekijk tevens het &quot;Net&quot; tabblad in FireBug en controleer dat alle javascript bestanden worden ingeladen. Wat valt je op?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Opdracht 2 - Lazy loading met AMD&lt;/h2&gt;
&lt;p&gt;Als je de javascript bestanden van case 6 bekijkt, dan zie je dat er een aantal zaken worden gedeclareerd, zoals: todos, gebruikers, todoViewInstance, maar ook classes als; TodoView en View. Je hebt je misschien al afgevraagd wat er gebeurd als je nogmaals variabelen declareert als &quot;todos&quot; of &quot;gebruikers&quot;. Tevens heb je je misschien afgevraagd wat er gebeurd als je nog een &quot;TodoView&quot; declareert.&lt;/p&gt;
&lt;p&gt;Als je geluk hebt bij het dubbel declareren van instance variabelen en classes krijg je een TypeError in je console, als je pech hebt lijkt alles nog te werken zoals het hoort, totdat je tegen een uithoek van je applicatie aanloopt en je vreemd gedrag en javascript errors krijgt. Volg onderstaande stappen om de opdracht uit te voeren:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Probeer in init.js onderaan nogmaals een constructor function genaamd TodoView te declareren. Refresh vervolgens je browser, wat gebeurd er? Hoe komt dit?&lt;/li&gt;
	&lt;li&gt;Haal de net gemaakt constructor function weer weg, refresh je browser en verifieer of de pagina weer werkt. Voer middels FireBug een console.log uit van de variable &quot;todoViewInstance&quot; en van &quot;window.todoViewInstance&quot;. Wat valt je op? Welke conclusie kun je hieruit voorzichtig trekken? Voer een === vergelijking tussen de twee uit om dit te verifieren.&lt;/li&gt;
	&lt;li&gt;Herhaal stap 2 met de variabele &quot;gebruikers&quot;. Herhaal stap 2 vervolgens met de classes &quot;View&quot; en &quot;TodoView&quot;. Wat valt je op?&lt;/li&gt;
	&lt;li&gt;Op welke manier kunnen we dit probleem van scoping oplossen, dus hoe zorg je ervoor dat niet alles binnen de global scope zit?&lt;/li&gt;
	&lt;li&gt;Pas het module pattern toe en zorg ervoor dat je een DataModule en een ViewModule maakt. Zorg er voor dat de applicatie na de aanpasingen blijft werken door een refresh te geven in je browser en te controleren dat er geen javascript errors meer optreden.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tips bij stap 5:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Voor deze opdracht is het voldoende om alle code die in 1 module hoort, ook in 1 file/bestand te plaatsen. Vergeet het template hier niet op aan te passen.&lt;/li&gt;
	&lt;li&gt;Denk goed na over de publieke API van de modules. Niet alle interne code hoeft van buiten de module benaderbaar te zijn.&lt;/li&gt;
	&lt;li&gt;Als je de opdracht goed hebt uitgevoerd, zijn alleen module variabelen en de publieke API&#039;s van de modules die hebt gemaakt beschikbaar in de global scope. Zo zal de View class, TodoView class en de todoViewInstance in de init.js niet meer beschikbaar moeten zijn in de global scope. Toon dit aan/controleer door stap 2 te herhalen. De View class zou je helemaal niet meer moeten kunnen achterhalen middels FireBug.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Opdracht 3 - Minification met AMD&lt;/h2&gt;
]]></content><private><![CDATA[]]></private><author><![CDATA[jsadmin]]></author></item>
